.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Path 3"
.TH Path 3 "2007-07-04" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Path \- Create or remove directory trees
.SH "VERSION"
.IX Header "VERSION"
This document describes version 2.00_06 of File::Path, released
2007\-07\-04.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use File::Path;
\&
\&    # modern
\&    mkpath( 'foo/bar/baz', '/zug/zwang', {verbose => 1} );
\&
\&    rmtree(
\&        'foo/bar/baz', '/zug/zwang',
\&        { verbose => 1, error  => \emy $err_list }
\&    );
\&
\&    # traditional
\&    mkpath(['/foo/bar/baz', 'blurfl/quux'], 1, 0711);
\&    rmtree(['foo/bar/baz', 'blurfl/quux'], 1, 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`mkpath\*(C'\fR function provides a convenient way to create directories,
even if your \f(CW\*(C`mkdir\*(C'\fR kernel call won't create more than one level
of directory at a time. Similarly, the \f(CW\*(C`rmtree\*(C'\fR function provides
a convenient way to delete a subtree from the directory structure,
much like the Unix command \f(CW\*(C`rm \-r\*(C'\fR.
.PP
Both functions may be called in one of two ways, the traditional,
compatible with code written since the dawn of time, and modern,
that offers a more flexible and readable idiom. New code should use
the modern interface.
.Sh "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
The modern way of calling \f(CW\*(C`mkpath\*(C'\fR and \f(CW\*(C`rmtree\*(C'\fR is with an optional
hash reference at the end of the parameter list that holds various
keys that can be used to control the function's behaviour, following
a plain list of directories upon which to operate.
.PP
\fI\f(CI\*(C`mkpath\*(C'\fI\fR
.IX Subsection "mkpath"
.PP
The following keys are recognised as as parameters to \f(CW\*(C`mkpath\*(C'\fR.
It returns the list of files actually created during the call.
.PP
.Vb 5
\&  my @created = mkpath(
\&    qw(/tmp /flub /home/nobody),
\&    {verbose => 1, mode => 0750},
\&  );
\&  print "created $_\en" for @created;
.Ve
.IP "mode" 4
.IX Item "mode"
The numeric mode to use when creating the directories (defaults
to 07777), to be modified by the current \f(CW\*(C`umask\*(C'\fR. (\f(CW\*(C`mask\*(C'\fR is
recognised as an alias for this parameter).
.IP "verbose" 4
.IX Item "verbose"
If present, will cause \f(CW\*(C`mkpath\*(C'\fR to print the name of each directory
as it is created. By default nothing is printed.
.IP "error" 4
.IX Item "error"
If present, will be interpreted as a reference to a list, and will
be used to store any errors that are encountered.  See the \s-1ERROR\s0
\&\s-1HANDLING\s0 section below to find out more.
.Sp
If this parameter is not used, any errors encountered will raise a
fatal error that need to be trapped in an \f(CW\*(C`eval\*(C'\fR block, or the
program will halt.
.PP
\fI\f(CI\*(C`rmtree\*(C'\fI\fR
.IX Subsection "rmtree"
.IP "verbose" 4
.IX Item "verbose"
If present, will cause \f(CW\*(C`rmtree\*(C'\fR to print the name of each file as
it is unlinked. By default nothing is printed.
.IP "skip_others" 4
.IX Item "skip_others"
When set to a true value, will cause \f(CW\*(C`rmtree\*(C'\fR to skip any files
to which you do not have delete access (if running under \s-1VMS\s0) or
write access (if running under another \s-1OS\s0). This will change in
the future when a criterion for 'delete permission' under OSs other
than \s-1VMS\s0 is settled.
.IP "keep_root" 4
.IX Item "keep_root"
When set to a true value, will cause everything except the specified
base directories to be unlinked. This comes in handy when cleaning
out an application's scratch directory.
.Sp
.Vb 1
\&  rmtree( '/tmp', {keep_root => 1} );
.Ve
.IP "result" 4
.IX Item "result"
If present, will be interpreted as a reference to a list, and will
be used to store the list of all files and directories unlinked
during the call. If nothing is unlinked, a reference to an empty
list is returned (rather than \f(CW\*(C`undef\*(C'\fR).
.Sp
.Vb 2
\&  rmtree( '/tmp', {result => \emy $list} );
\&  print "unlinked $_\en" for @$list;
.Ve
.IP "error" 4
.IX Item "error"
If present, will be interpreted as a reference to a list,
and will be used to store any errors that are encountered.
See the \s-1ERROR\s0 \s-1HANDLING\s0 section below to find out more.
.Sp
If this parameter is not used, any errors encountered will
raise a fatal error that need to be trapped in an \f(CW\*(C`eval\*(C'\fR
block, or the program will halt.
.Sh "\s-1TRADITIONAL\s0 \s-1INTERFACE\s0"
.IX Subsection "TRADITIONAL INTERFACE"
The old interface for \f(CW\*(C`mkpath\*(C'\fR and \f(CW\*(C`rmtree\*(C'\fR take a
reference to a list of directories (to create or remove),
followed by a series of positional numeric modal parameters that
control their behaviour.
.PP
This design made it difficult to add
additional functionality, as well as posed the problem
of what to do when you don't care how the initial
positional parameters are specified but only the last
one needs to be specified. The calls themselves are also
less self-documenting.
.PP
\&\f(CW\*(C`mkpath\*(C'\fR takes three arguments:
.IP "\(bu" 4
The name of the path to create, or a reference
to a list of paths to create,
.IP "\(bu" 4
a boolean value, which if \s-1TRUE\s0 will cause \f(CW\*(C`mkpath\*(C'\fR
to print the name of each directory as it is created
(defaults to \s-1FALSE\s0), and
.IP "\(bu" 4
the numeric mode to use when creating the directories
(defaults to 0777), to be modified by the current umask.
.PP
It returns a list of all directories (including intermediates, determined
using the Unix '/' separator) created.  In scalar context it returns
the number of directories created.
.PP
If a system error prevents a directory from being created, then the
\&\f(CW\*(C`mkpath\*(C'\fR function throws a fatal error with \f(CW\*(C`Carp::croak\*(C'\fR. This error
can be trapped with an \f(CW\*(C`eval\*(C'\fR block:
.PP
.Vb 4
\&  eval { mkpath($dir) };
\&  if ($@) {
\&    print "Couldn't create $dir: $@";
\&  }
.Ve
.PP
In the traditional form, \f(CW\*(C`rmtree\*(C'\fR takes three arguments:
.IP "\(bu" 4
the root of the subtree to delete, or a reference to
a list of roots.  All of the files and directories
below each root, as well as the roots themselves,
will be deleted.
.IP "\(bu" 4
a boolean value, which if \s-1TRUE\s0 will cause \f(CW\*(C`rmtree\*(C'\fR to
print a message each time it examines a file, giving the
name of the file, and indicating whether it's using \f(CW\*(C`rmdir\*(C'\fR
or \f(CW\*(C`unlink\*(C'\fR to remove it, or that it's skipping it.
(defaults to \s-1FALSE\s0)
.IP "\(bu" 4
a boolean value, which if \s-1TRUE\s0 will cause \f(CW\*(C`rmtree\*(C'\fR to
skip any files to which you do not have delete access
(if running under \s-1VMS\s0) or write access (if running
under another \s-1OS\s0).  This will change in the future when
a criterion for 'delete permission' under OSs other
than \s-1VMS\s0 is settled.  (defaults to \s-1FALSE\s0)
.PP
It returns the number of files, directories and symlinks successfully
deleted.  Symlinks are simply deleted and not followed.
.PP
Note also that the occurrence of errors in \f(CW\*(C`rmtree\*(C'\fR using the
traditional interface can be determined \fIonly\fR by trapping diagnostic
messages using \f(CW$SIG{_\|_WARN_\|_}\fR; it is not apparent from the return
value. (The modern interface may use the \f(CW\*(C`error\*(C'\fR parameter to
record any problems encountered.
.Sh "\s-1ERROR\s0 \s-1HANDLING\s0"
.IX Subsection "ERROR HANDLING"
If \f(CW\*(C`mkpath\*(C'\fR or \f(CW\*(C`rmtree\*(C'\fR encounter an error, a diagnostic message
will be printed to \f(CW\*(C`STDERR\*(C'\fR via \f(CW\*(C`carp\*(C'\fR (for non-fatal errors),
or via \f(CW\*(C`croak\*(C'\fR (for fatal errors).
.PP
If this behaviour is not desirable, the \f(CW\*(C`error\*(C'\fR attribute may be
used to hold a reference to a variable, which will be used to store
the diagnostics. The result is a reference to a list of hash
references. For each hash reference, the key is the name of the
file, and the value is the error message (usually the contents of
\&\f(CW$!\fR). An example usage looks like:
.PP
.Vb 5
\&  rmpath( 'foo/bar', 'bar/rat', {error => \emy $err} );
\&  for my $diag (@$err) {
\&    my ($file, $message) = each %$diag;
\&    print "problem unlinking $file: $message\en";
\&  }
.Ve
.PP
If no errors are encountered, \f(CW$err\fR will point to an empty list
(thus there is no need to test for \f(CW\*(C`undef\*(C'\fR). If a general error
is encountered (for instance, \f(CW\*(C`rmtree\*(C'\fR attempts to remove a directory
tree that does not exist), the diagnostic key will be empty, only
the value will be set:
.PP
.Vb 7
\&  rmpath( '/no/such/path', {error => \emy $err} );
\&  for my $diag (@$err) {
\&    my ($file, $message) = each %$diag;
\&    if ($file eq '') {
\&      print "general error: $message\en";
\&    }
\&  }
.Ve
.Sh "\s-1NOTES\s0"
.IX Subsection "NOTES"
\fI\s-1HEURISTICS\s0\fR
.IX Subsection "HEURISTICS"
.PP
The functions detect (as far as possible) which way they are being
called and will act appropriately. It is important to remember that
the heuristic for detecting the old style is either the presence
of an array reference, or two or three parameters total and second
and third parameters are numeric. Hence...
.PP
.Vb 1
\&    mkpath '486', '487', '488';
.Ve
.PP
\&... will not assume the modern style and create three directories, rather
it will create one directory verbosely, setting the permission to
0750 (488 being the decimal equivalent of octal 750). Here, old
style trumps new. It must, for backwards compatibility reasons.
.PP
If you want to ensure there is absolutely no ambiguity about which
way the function will behave, make sure the first parameter is a
reference to a one-element list, to force the old style interpretation:
.PP
.Vb 1
\&    mkpath ['486'], '487', '488';
.Ve
.PP
and get only one directory created. Or add a reference to an empty
parameter hash, to force the new style:
.PP
.Vb 1
\&    mkpath '486', '487', '488', {};
.Ve
.PP
\&... and hence create the three directories. If the empty hash
reference seems a little strange to your eyes, or you suspect a
subsequent programmer might \fIhelpfully\fR optimise it away, you
can add a parameter set to a default value:
.PP
.Vb 1
\&    mkpath '486', '487', '488', {verbose => 0};
.Ve
.PP
\fI\s-1RACE\s0 \s-1CONDITIONS\s0\fR
.IX Subsection "RACE CONDITIONS"
.PP
There are race conditions internal to the implementation of \f(CW\*(C`rmtree\*(C'\fR
making it unsafe to use on directory trees which may be altered or
moved while \f(CW\*(C`rmtree\*(C'\fR is running, and in particular on any directory
trees with any path components or subdirectories potentially writable
by untrusted users.
.PP
Additionally, if the \f(CW\*(C`skip_others\*(C'\fR parameter is not set (or the
third parameter in the traditional inferface is not \s-1TRUE\s0) and
\&\f(CW\*(C`rmtree\*(C'\fR is interrupted, it may leave files and directories with
permissions altered to allow deletion.
.PP
\&\f(CW\*(C`File::Path\*(C'\fR blindly exports \f(CW\*(C`mkpath\*(C'\fR and \f(CW\*(C`rmtree\*(C'\fR into the
current namespace. These days, this is considered bad style, but
to change it now would break too much code. Nonetheless, you are
invited to specify what it is you are expecting to use:
.PP
.Vb 1
\&  use File::Path 'rmtree';
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "\(bu" 4
On Windows, if \f(CW\*(C`mkpath\*(C'\fR gives you the warning: \fBNo such file or
directory\fR, this may mean that you've exceeded your filesystem's
maximum path length.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Find::File::Rule
.Sp
When removing directory trees, if you want to examine each file
before deciding whether to deleting it (and possibly leaving large
swathes alone), \fIFile::Find::Rule\fR offers a convenient and flexible
approach.
.SH "BUGS"
.IX Header "BUGS"
Please report all bugs on the \s-1RT\s0 queue:
.PP
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=File\-Path>
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Bunce <\fITim.Bunce@ig.co.uk\fR> and
Charles Bailey <\fIbailey@newman.upenn.edu\fR>.
.PP
Currently maintained by David Landgren <\fIdavid@landgren.net\fR>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is copyright (C) Charles Bailey, Tim Bunce and
David Landgren 1995\-2007.  All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
